#!/usr/bin/env node

const http = require('http');
const path = require('path');
const fs = require('fs');
const log4js = require('log4js');
log4js.configure(path.join(__dirname, '..', 'configs', 'log4js.json'));

// create logs directory, if it's NOT exists
const logsPath = path.join(__dirname, '..', 'logs');
if (!fs.existsSync(logsPath)) {
    fs.mkdirSync(logsPath);
}

// create HTTP server, listening on provided port, using log4js as logger
const logger = log4js.getLogger(__filename);
const app = require('../frontend/app');
app.use(log4js.connectLogger(logger, {level: 'debug'}));
const server = http.createServer(app);
const port = 80;
server.listen(port);
server.on('error', onError);
logger.debug('Create HTTP server success. Listening on port: ', port);

// event listener for HTTP server 'error' event
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error('Port ', port, ' requires elevated privileges.');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error('Port ', port, ' is already in use.');
            process.exit(1);
            break;
        default:
            console.error('Unknown error code: ', error.code);
            throw error;
    }
}
